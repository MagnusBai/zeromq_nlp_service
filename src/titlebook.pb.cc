// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: titlebook.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "titlebook.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tutorial {

namespace {

const ::google::protobuf::Descriptor* TitleList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TitleList_reflection_ = NULL;
const ::google::protobuf::Descriptor* IdList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IdList_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_titlebook_2eproto() {
  protobuf_AddDesc_titlebook_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "titlebook.proto");
  GOOGLE_CHECK(file != NULL);
  TitleList_descriptor_ = file->message_type(0);
  static const int TitleList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleList, title_),
  };
  TitleList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TitleList_descriptor_,
      TitleList::default_instance_,
      TitleList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TitleList));
  IdList_descriptor_ = file->message_type(1);
  static const int IdList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IdList, id_),
  };
  IdList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IdList_descriptor_,
      IdList::default_instance_,
      IdList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IdList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IdList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IdList));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_titlebook_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TitleList_descriptor_, &TitleList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IdList_descriptor_, &IdList::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_titlebook_2eproto() {
  delete TitleList::default_instance_;
  delete TitleList_reflection_;
  delete IdList::default_instance_;
  delete IdList_reflection_;
}

void protobuf_AddDesc_titlebook_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017titlebook.proto\022\010tutorial\"\032\n\tTitleList"
    "\022\r\n\005title\030\001 \003(\t\"\024\n\006IdList\022\n\n\002id\030\001 \003(\005", 77);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "titlebook.proto", &protobuf_RegisterTypes);
  TitleList::default_instance_ = new TitleList();
  IdList::default_instance_ = new IdList();
  TitleList::default_instance_->InitAsDefaultInstance();
  IdList::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_titlebook_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_titlebook_2eproto {
  StaticDescriptorInitializer_titlebook_2eproto() {
    protobuf_AddDesc_titlebook_2eproto();
  }
} static_descriptor_initializer_titlebook_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TitleList::kTitleFieldNumber;
#endif  // !_MSC_VER

TitleList::TitleList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TitleList::InitAsDefaultInstance() {
}

TitleList::TitleList(const TitleList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TitleList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TitleList::~TitleList() {
  SharedDtor();
}

void TitleList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TitleList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TitleList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TitleList_descriptor_;
}

const TitleList& TitleList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_titlebook_2eproto();
  return *default_instance_;
}

TitleList* TitleList::default_instance_ = NULL;

TitleList* TitleList::New() const {
  return new TitleList;
}

void TitleList::Clear() {
  title_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TitleList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string title = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->title(this->title_size() - 1).data(),
            this->title(this->title_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_title;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TitleList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string title = 1;
  for (int i = 0; i < this->title_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->title(i).data(), this->title(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->title(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TitleList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string title = 1;
  for (int i = 0; i < this->title_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title(i).data(), this->title(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->title(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TitleList::ByteSize() const {
  int total_size = 0;

  // repeated string title = 1;
  total_size += 1 * this->title_size();
  for (int i = 0; i < this->title_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->title(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TitleList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TitleList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TitleList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TitleList::MergeFrom(const TitleList& from) {
  GOOGLE_CHECK_NE(&from, this);
  title_.MergeFrom(from.title_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TitleList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TitleList::CopyFrom(const TitleList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TitleList::IsInitialized() const {

  return true;
}

void TitleList::Swap(TitleList* other) {
  if (other != this) {
    title_.Swap(&other->title_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TitleList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TitleList_descriptor_;
  metadata.reflection = TitleList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IdList::kIdFieldNumber;
#endif  // !_MSC_VER

IdList::IdList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IdList::InitAsDefaultInstance() {
}

IdList::IdList(const IdList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IdList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IdList::~IdList() {
  SharedDtor();
}

void IdList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IdList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IdList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IdList_descriptor_;
}

const IdList& IdList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_titlebook_2eproto();
  return *default_instance_;
}

IdList* IdList::default_instance_ = NULL;

IdList* IdList::New() const {
  return new IdList;
}

void IdList::Clear() {
  id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IdList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IdList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 id = 1;
  for (int i = 0; i < this->id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IdList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 id = 1;
  for (int i = 0; i < this->id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IdList::ByteSize() const {
  int total_size = 0;

  // repeated int32 id = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->id(i));
    }
    total_size += 1 * this->id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IdList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IdList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IdList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IdList::MergeFrom(const IdList& from) {
  GOOGLE_CHECK_NE(&from, this);
  id_.MergeFrom(from.id_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IdList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IdList::CopyFrom(const IdList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IdList::IsInitialized() const {

  return true;
}

void IdList::Swap(IdList* other) {
  if (other != this) {
    id_.Swap(&other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IdList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IdList_descriptor_;
  metadata.reflection = IdList_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace tutorial

// @@protoc_insertion_point(global_scope)
